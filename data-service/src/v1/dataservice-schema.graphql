type Query {
  entity(code: String!): EntityType
  entities(
    filter: EntitySearchInput!
    first: Int!
    offset: Int!
  ): EntityCollectionType!
  interactions(code: String!, severity: String): DrugInteractionsType!
}

type EntityType {
  children: [EntityType!]
  parents: [EntityType!]
  code: String!
  description: String
  interactions: [DrugInteractionType!]
  properties: [PropertyType!]
  type: String!
  uid: ID!
  product: EntityType
}

type DrugInteractionType {
  description: String!
  name: String!
  rxcui: String!
  severity: String!
  source: String!
}

type PropertyType {
  properties: [PropertyType!]
  type: String!
  value: String!
}

type EntityCollectionType {
  data: [EntityType!]!
  totalLength: Int!
}

input EntitySearchInput {
  code: String
  description: String
  orderBy: EntitySortInput
  categories: [String!]
  type: String
  search: String
  match: String
}

input EntitySortInput {
  descending: Boolean
  field: String
}

type DrugInteractionsType {
  data: [DrugInteractionType!]!
  errors: [GraphQLErrorType!]!
  rxcui: String!
}

type GraphQLErrorType {
  message: String!
  locations: String
  path: [String!]
  nodes: String
  source: SourceType
  positions: [Int!]
  originalError: ErrorType
  name: String
  stack: String
}

type SourceType {
  body: String!
  name: String!
  locationOffset: LocationType!
}

type LocationType {
  line: Int!
  column: Int!
}

type ErrorType {
  name: String!
  message: String!
  stack: String!
}
